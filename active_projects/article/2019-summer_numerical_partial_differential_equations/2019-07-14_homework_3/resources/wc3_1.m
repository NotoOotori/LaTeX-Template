clear; close all;

model = createpde();

dl = get_geometry();
geometryFromEdges(model, dl);
figure;
pdegplot(dl, 'EdgeLabels', 'on', 'SubdomainLabels', 'on');
axis equal;

specifyCoefficients(model, ...
    'm', 0, ...
    'd', 0, ...
    'c', -1, ...
    'a', -10, ...
    'f', 1, ...
    'Face', 3);
specifyCoefficients(model, ...
    'm', 0, ...
    'd', 0, ...
    'c', -1, ...
    'a', -10, ...
    'f', 2, ...
    'Face', 4);
specifyCoefficients(model, ...
    'm', 0, ...
    'd', 0, ...
    'c', -1, ...
    'a', -10, ...
    'f', 3, ...
    'Face', 1);
specifyCoefficients(model, ...
    'm', 0, ...
    'd', 0, ...
    'c', -1, ...
    'a', -10, ...
    'f', 4, ...
    'Face', 2);

applyBoundaryCondition(model, ...
    'dirichlet', 'Edge', ...
    1 : model.Geometry.NumEdges, 'u', 0);

generateMesh(model, 'Hmax', 0.1);

result = solvepde(model);
figure;
pdeplot(model, 'XYData', result.NodalSolution);
axis equal;

function dl = get_geometry()
    gdd = [1 0 0 1]';
    gdr1 = [3 4 0 1 1 0 0 0 1 1]';
    gdr2 = [3 4 0 -1 -1 0 0 0 1 1]';
    gdr3 = [3 4 0 -1 -1 0 0 0 -1 -1]';
    gdr4 = [3 4 0 1 1 0 0 0 -1 -1]';
    gd = [[gdd; zeros(6, 1)] gdr1 gdr2 gdr3 gdr4];
    sf = 'D*(R1+R2+R3+R4)';
    ns = char('D', 'R1', 'R2', 'R3', 'R4'); ns = ns';
    dl = decsg(gd, sf, ns);
end
